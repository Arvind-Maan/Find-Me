{"version":3,"sources":["logo.svg","components/Nav.js","components/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","className","href","SearchBox","props","action","onSubmit","handleSubmit","type","placeholder","onChange","handleChange","App","event","preventDefault","fetch","api_url","key","state","term","then","data","json","setState","movies","results","e","target","value","process","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,qICc5BC,G,YAZH,WACX,OACC,yBAAKC,UAAU,iBACd,yBAAKA,UAAU,eACd,uBAAGC,KAAK,IAAID,UAAU,QAAtB,eCWWE,EAfG,SAACC,GAClB,OACC,yBAAKH,UAAU,oBACd,0BAAMI,OAAO,GAAGC,SAAUF,EAAMG,cAC/B,2BACCC,KAAK,OACLC,YAAY,wBACZC,SAAUN,EAAMO,eAEjB,yBAAKV,UAAU,mBC6BJW,E,kDAlCd,aAAe,IAAD,8BACb,gBASDN,SAAW,SAACO,GACXA,EAAMC,iBACNC,MAAM,GAAD,OAAI,EAAKC,QAAT,oBAA4B,EAAKC,IAAjC,kBAA8C,EAAKC,MAAMC,OAAQC,MACrE,SAACC,GAAD,OACCA,EAAKC,OAAOF,MAAK,SAACC,GACjB,EAAKE,SAAS,CAAEC,OAAO,YAAKH,EAAKI,kBAfvB,EAoBdf,SAAW,SAACgB,GACX,EAAKH,SAAS,CAAEJ,KAAMO,EAAEC,OAAOC,SAnB/B,EAAKZ,QAAU,4CACf,EAAKC,IAAMY,mCACX,EAAKX,MAAQ,CACZC,KAAM,GACNK,OAAQ,IANI,E,qDAyBb,OACC,yBAAKvB,UAAU,OACd,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWM,aAAcuB,KAAKxB,SAAUK,aAAcmB,KAAKpB,gB,GA7B7CqB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ecbc9d04.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nconst Nav = () => {\n\treturn (\n\t\t<nav className=\"nav-container\">\n\t\t\t<div className=\"nav-wrapper\">\n\t\t\t\t<a href=\"#\" className=\"logo\">\n\t\t\t\t\tFind-Me\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</nav>\n\t);\n};\n\nexport default Nav;\n","import React from \"react\";\n\nconst SearchBox = (props) => {\n\treturn (\n\t\t<div className=\"search-container\">\n\t\t\t<form action=\"\" onSubmit={props.handleSubmit}>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Search for a movie...\"\n\t\t\t\t\tonChange={props.handleChange}\n\t\t\t\t/>\n\t\t\t\t<div className=\"input-field\"></div>\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nexport default SearchBox;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport SearchBox from \"./components/SearchBox\";\nclass App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.api_url = \"https://api.themoviedb.org/3/search/movie\";\n\t\tthis.key = process.env.REACT_APP_MDB_API_KEY;\n\t\tthis.state = {\n\t\t\tterm: \"\",\n\t\t\tmovies: [],\n\t\t};\n\t}\n\n\tonSubmit = (event) => {\n\t\tevent.preventDefault();\n\t\tfetch(`${this.api_url}?api_key=${this.key}&query=${this.state.term}`).then(\n\t\t\t(data) =>\n\t\t\t\tdata.json().then((data) => {\n\t\t\t\t\tthis.setState({ movies: [...data.results] });\n\t\t\t\t}),\n\t\t);\n\t};\n\n\tonChange = (e) => {\n\t\tthis.setState({ term: e.target.value });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Nav />\n\t\t\t\t<SearchBox handleSubmit={this.onSubmit} handleChange={this.onChange} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}